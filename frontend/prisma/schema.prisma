// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Enable type-safe full-text search
  previewFeatures = ["fullTextSearch", "filterJson"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  email     String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255) // For storing BCrypt hashed passwords
  role      Role      @default(USER)
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  lastLogin DateTime? @map("last_login")
  tasks     Task[]
  settings  Json?     @default("{}") // User preferences and settings

  @@index([email])
  @@map("users")
}

model Task {
  id           Int       @id @default(autoincrement())
  title        String    @db.VarChar(255)
  description  String?   @db.Text
  dueDate      DateTime? @map("due_date")
  priority     Priority  @default(MEDIUM)
  completed    Boolean   @default(false)
  completedAt  DateTime? @map("completed_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int       @map("user_id")
  category     Category? @relation(fields: [categoryId], references: [id], onUpdate: Cascade)
  categoryId   Int?      @map("category_id")
  attachments  String[]  @default([]) // Array of attachment file paths or URLs
  tags         String[]  @default([]) // Array of tag strings
  reminderDate DateTime? @map("reminder_date")
  
  // Additional metadata for tasks
  estimatedTime Int?      @map("estimated_time") // In minutes
  actualTime    Int?      @map("actual_time") // In minutes
  isRecurring   Boolean   @default(false) @map("is_recurring")
  recurringRule String?   @map("recurring_rule") // iCalendar RFC 5545 format

  @@index([userId])
  @@index([categoryId])
  @@index([dueDate])
  @@index([completed])
  @@map("tasks")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  description String?   @db.Text
  color       String?   @db.VarChar(7) // Hex color code (e.g., #FF5733)
  icon        String?   @db.VarChar(50) // Icon name or identifier
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  isDefault   Boolean   @default(false) @map("is_default")
  tasks       Task[]
  
  @@index([name])
  @@map("categories")
}

// Audit log for tracking important changes
model AuditLog {
  id        Int      @id @default(autoincrement())
  entityType String  @map("entity_type") @db.VarChar(50) // e.g., "Task", "User", "Category"
  entityId   Int     @map("entity_id")
  action     String  @db.VarChar(50) // e.g., "CREATE", "UPDATE", "DELETE"
  userId     Int     @map("user_id")
  timestamp  DateTime @default(now())
  details    Json?   // Details about what changed

  @@index([entityType, entityId])
  @@index([userId])
  @@index([timestamp])
  @@map("audit_logs")
}

// User notifications
model Notification {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  title     String    @db.VarChar(255)
  content   String    @db.Text
  isRead    Boolean   @default(false) @map("is_read")
  createdAt DateTime  @default(now()) @map("created_at")
  readAt    DateTime? @map("read_at")
  type      String    @db.VarChar(50) // e.g., "TASK_DUE", "MENTIONED", "SYSTEM"
  link      String?   @db.VarChar(255) // URL to navigate to when notification is clicked

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

// Token for password reset or email verification
model Token {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(255)
  userId    Int      @map("user_id")
  type      TokenType
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  usedAt    DateTime? @map("used_at")

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("tokens")
}

enum Role {
  USER
  ADMIN
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum TokenType {
  PASSWORD_RESET
  EMAIL_VERIFICATION
}
